
hmc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08001a50  08001a50  00002a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b30  08001b30  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001b30  08001b30  00002b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b38  08001b38  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b38  08001b38  00002b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b3c  08001b3c  00002b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001b40  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000054  08001b94  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08001b94  000031c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c2c  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008db  00000000  00000000  00004cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00005590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019b  00000000  00000000  000057e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015089  00000000  00000000  0000597b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d46  00000000  00000000  0001aa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008264a  00000000  00000000  0001e74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d3c  00000000  00000000  000a0dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000a1b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001a38 	.word	0x08001a38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001a38 	.word	0x08001a38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <I2C1_Init>:
 */


#include "hmc_i2c.h"
void I2C1_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
    // Reset I2C first
    RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <I2C1_Init+0x104>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	4a3e      	ldr	r2, [pc, #248]	@ (80006fc <I2C1_Init+0x104>)
 8000604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000608:	6213      	str	r3, [r2, #32]
    for(volatile int i = 0; i < 100; i++);
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	e002      	b.n	8000616 <I2C1_Init+0x1e>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b63      	cmp	r3, #99	@ 0x63
 800061a:	ddf9      	ble.n	8000610 <I2C1_Init+0x18>
    RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 800061c:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <I2C1_Init+0x104>)
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	4a36      	ldr	r2, [pc, #216]	@ (80006fc <I2C1_Init+0x104>)
 8000622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000626:	6213      	str	r3, [r2, #32]

	//Clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000628:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <I2C1_Init+0x104>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062c:	4a33      	ldr	r2, [pc, #204]	@ (80006fc <I2C1_Init+0x104>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000634:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <I2C1_Init+0x104>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a30      	ldr	r2, [pc, #192]	@ (80006fc <I2C1_Init+0x104>)
 800063a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40

	//Analog mode
    GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <I2C1_Init+0x108>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a2e      	ldr	r2, [pc, #184]	@ (8000700 <I2C1_Init+0x108>)
 8000646:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800064a:	6013      	str	r3, [r2, #0]

    //Open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT_8 | GPIO_OTYPER_OT_9;
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <I2C1_Init+0x108>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <I2C1_Init+0x108>)
 8000652:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000656:	6053      	str	r3, [r2, #4]

    //High speed output
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR9;
 8000658:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <I2C1_Init+0x108>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a28      	ldr	r2, [pc, #160]	@ (8000700 <I2C1_Init+0x108>)
 800065e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000662:	6093      	str	r3, [r2, #8]

    //Pull up resistor
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR9_0;
 8000664:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <I2C1_Init+0x108>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4a25      	ldr	r2, [pc, #148]	@ (8000700 <I2C1_Init+0x108>)
 800066a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800066e:	60d3      	str	r3, [r2, #12]

    //Alternative function for i2c
	GPIOB->AFR[1] |= (4 << 0) | (4 << 4);
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <I2C1_Init+0x108>)
 8000672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000674:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <I2C1_Init+0x108>)
 8000676:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800067a:	6253      	str	r3, [r2, #36]	@ 0x24

    // Make sure the bus is free
    while(I2C1->SR2 & I2C_SR2_BUSY) {
 800067c:	e014      	b.n	80006a8 <I2C1_Init+0xb0>
        // Toggle I2C pins to release bus
        GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <I2C1_Init+0x108>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <I2C1_Init+0x108>)
 8000684:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000688:	6013      	str	r3, [r2, #0]
        for(volatile int i = 0; i < 100; i++);
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	e002      	b.n	8000696 <I2C1_Init+0x9e>
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b63      	cmp	r3, #99	@ 0x63
 800069a:	ddf9      	ble.n	8000690 <I2C1_Init+0x98>
        GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <I2C1_Init+0x108>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <I2C1_Init+0x108>)
 80006a2:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80006a6:	6013      	str	r3, [r2, #0]
    while(I2C1->SR2 & I2C_SR2_BUSY) {
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <I2C1_Init+0x10c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1e4      	bne.n	800067e <I2C1_Init+0x86>
    }

	//Reset I2C
	I2C1->CR1 |= (1<<15);
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <I2C1_Init+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <I2C1_Init+0x10c>)
 80006ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006be:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <I2C1_Init+0x10c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <I2C1_Init+0x10c>)
 80006c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80006ca:	6013      	str	r3, [r2, #0]

	//I2C clock bus
    I2C1->CR2 |= (42<<0);
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <I2C1_Init+0x10c>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <I2C1_Init+0x10c>)
 80006d2:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 80006d6:	6053      	str	r3, [r2, #4]
    I2C1->CCR = 210<<0;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <I2C1_Init+0x10c>)
 80006da:	22d2      	movs	r2, #210	@ 0xd2
 80006dc:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <I2C1_Init+0x10c>)
 80006e0:	222b      	movs	r2, #43	@ 0x2b
 80006e2:	621a      	str	r2, [r3, #32]

    //I2C enable
	I2C1->CR1 |= I2C_CR1_PE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <I2C1_Init+0x10c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a06      	ldr	r2, [pc, #24]	@ (8000704 <I2C1_Init+0x10c>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400
 8000704:	40005400 	.word	0x40005400

08000708 <I2C1_Write>:

// Modify I2C1_Write function
void I2C1_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	460b      	mov	r3, r1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	4613      	mov	r3, r2
 8000718:	717b      	strb	r3, [r7, #5]
    // Start condition
    I2C1->CR1 |= I2C_CR1_ACK;
 800071a:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <I2C1_Write+0xb4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <I2C1_Write+0xb4>)
 8000720:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000724:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_START;
 8000726:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <I2C1_Write+0xb4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a24      	ldr	r2, [pc, #144]	@ (80007bc <I2C1_Write+0xb4>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000730:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000732:	bf00      	nop
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <I2C1_Write+0xb4>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <I2C1_Write+0x2c>

    // Send slave address (write mode)
    I2C1->DR = address << 1;  // Shift left 1 bit for write mode (0)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a1e      	ldr	r2, [pc, #120]	@ (80007bc <I2C1_Write+0xb4>)
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000748:	bf00      	nop
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <I2C1_Write+0xb4>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0f9      	beq.n	800074a <I2C1_Write+0x42>
    (void)I2C1->SR1;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <I2C1_Write+0xb4>)
 8000758:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <I2C1_Write+0xb4>)
 800075c:	699b      	ldr	r3, [r3, #24]

    // Send register address
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 800075e:	bf00      	nop
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <I2C1_Write+0xb4>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f9      	beq.n	8000760 <I2C1_Write+0x58>
    I2C1->DR = reg;
 800076c:	4a13      	ldr	r2, [pc, #76]	@ (80007bc <I2C1_Write+0xb4>)
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000772:	bf00      	nop
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <I2C1_Write+0xb4>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <I2C1_Write+0x6c>

    // Send data
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000780:	bf00      	nop
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <I2C1_Write+0xb4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0f9      	beq.n	8000782 <I2C1_Write+0x7a>
    I2C1->DR = data;
 800078e:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <I2C1_Write+0xb4>)
 8000790:	797b      	ldrb	r3, [r7, #5]
 8000792:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000794:	bf00      	nop
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <I2C1_Write+0xb4>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <I2C1_Write+0x8e>

    // Stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <I2C1_Write+0xb4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <I2C1_Write+0xb4>)
 80007a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ac:	6013      	str	r3, [r2, #0]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40005400 	.word	0x40005400

080007c0 <I2C1_Read>:

uint8_t I2C1_Read(uint8_t address, uint8_t reg)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
    uint8_t data = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]

    // Start condition
    I2C1->CR1 |= I2C_CR1_ACK;
 80007d4:	4b36      	ldr	r3, [pc, #216]	@ (80008b0 <I2C1_Read+0xf0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a35      	ldr	r2, [pc, #212]	@ (80008b0 <I2C1_Read+0xf0>)
 80007da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007de:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_START;
 80007e0:	4b33      	ldr	r3, [pc, #204]	@ (80008b0 <I2C1_Read+0xf0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a32      	ldr	r2, [pc, #200]	@ (80008b0 <I2C1_Read+0xf0>)
 80007e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ea:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80007ec:	bf00      	nop
 80007ee:	4b30      	ldr	r3, [pc, #192]	@ (80008b0 <I2C1_Read+0xf0>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0f9      	beq.n	80007ee <I2C1_Read+0x2e>

    // Send slave address (write mode)
    I2C1->DR = address << 1;  // Shift left 1 bit for write mode (0)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a2c      	ldr	r2, [pc, #176]	@ (80008b0 <I2C1_Read+0xf0>)
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000802:	bf00      	nop
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <I2C1_Read+0xf0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <I2C1_Read+0x44>
    (void)I2C1->SR1;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <I2C1_Read+0xf0>)
 8000812:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <I2C1_Read+0xf0>)
 8000816:	699b      	ldr	r3, [r3, #24]

    // Send register address
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000818:	bf00      	nop
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <I2C1_Read+0xf0>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <I2C1_Read+0x5a>
    I2C1->DR = reg;
 8000826:	4a22      	ldr	r2, [pc, #136]	@ (80008b0 <I2C1_Read+0xf0>)
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 800082c:	bf00      	nop
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <I2C1_Read+0xf0>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f9      	beq.n	800082e <I2C1_Read+0x6e>

    // Restart for reading
    I2C1->CR1 |= I2C_CR1_START;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <I2C1_Read+0xf0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <I2C1_Read+0xf0>)
 8000840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000844:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000846:	bf00      	nop
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <I2C1_Read+0xf0>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f9      	beq.n	8000848 <I2C1_Read+0x88>

    // Send slave address (read mode)
    I2C1->DR = (address << 1) | 0x1;  // Shift left 1 bit and set read bit (1)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	f043 0201 	orr.w	r2, r3, #1
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <I2C1_Read+0xf0>)
 800085e:	611a      	str	r2, [r3, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000860:	bf00      	nop
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <I2C1_Read+0xf0>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <I2C1_Read+0xa2>
    
    // Clear ACK bit and set STOP
    I2C1->CR1 &= ~I2C_CR1_ACK;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <I2C1_Read+0xf0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <I2C1_Read+0xf0>)
 8000874:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000878:	6013      	str	r3, [r2, #0]
    (void)I2C1->SR1;
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <I2C1_Read+0xf0>)
 800087c:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <I2C1_Read+0xf0>)
 8000880:	699b      	ldr	r3, [r3, #24]

    // Wait for data and read it
    while(!(I2C1->SR1 & I2C_SR1_RXNE));
 8000882:	bf00      	nop
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <I2C1_Read+0xf0>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f9      	beq.n	8000884 <I2C1_Read+0xc4>
    data = I2C1->DR;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <I2C1_Read+0xf0>)
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	73fb      	strb	r3, [r7, #15]

    // Stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <I2C1_Read+0xf0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a05      	ldr	r2, [pc, #20]	@ (80008b0 <I2C1_Read+0xf0>)
 800089c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008a0:	6013      	str	r3, [r2, #0]

    return data;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40005400 	.word	0x40005400

080008b4 <I2C1_ReadBurst>:

// Add this new function to read multiple registers in sequence
void I2C1_ReadBurst(uint8_t address, uint8_t start_reg, uint8_t* buffer, uint8_t length)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	603a      	str	r2, [r7, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	460b      	mov	r3, r1
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	4613      	mov	r3, r2
 80008c8:	717b      	strb	r3, [r7, #5]
    // Start condition
    I2C1->CR1 |= I2C_CR1_ACK;
 80008ca:	4b48      	ldr	r3, [pc, #288]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a47      	ldr	r2, [pc, #284]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d4:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_START;
 80008d6:	4b45      	ldr	r3, [pc, #276]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a44      	ldr	r2, [pc, #272]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e0:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80008e2:	bf00      	nop
 80008e4:	4b41      	ldr	r3, [pc, #260]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <I2C1_ReadBurst+0x30>

    // Send slave address (write mode) to set register pointer
    I2C1->DR = address << 1;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4a3e      	ldr	r2, [pc, #248]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80008f8:	bf00      	nop
 80008fa:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0f9      	beq.n	80008fa <I2C1_ReadBurst+0x46>
    (void)I2C1->SR1;
 8000906:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000908:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800090a:	4b38      	ldr	r3, [pc, #224]	@ (80009ec <I2C1_ReadBurst+0x138>)
 800090c:	699b      	ldr	r3, [r3, #24]

    // Send start register address
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 800090e:	bf00      	nop
 8000910:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <I2C1_ReadBurst+0x5c>
    I2C1->DR = start_reg;
 800091c:	4a33      	ldr	r2, [pc, #204]	@ (80009ec <I2C1_ReadBurst+0x138>)
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000922:	bf00      	nop
 8000924:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f9      	beq.n	8000924 <I2C1_ReadBurst+0x70>

    // Repeated start
    I2C1->CR1 |= I2C_CR1_START;
 8000930:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a2d      	ldr	r2, [pc, #180]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093a:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 800093c:	bf00      	nop
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f9      	beq.n	800093e <I2C1_ReadBurst+0x8a>

    // Send slave address (read mode)
    I2C1->DR = (address << 1) | 0x1;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	f043 0201 	orr.w	r2, r3, #1
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000954:	611a      	str	r2, [r3, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000956:	bf00      	nop
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <I2C1_ReadBurst+0x138>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <I2C1_ReadBurst+0xa4>
    (void)I2C1->SR1;
 8000964:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000966:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000968:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <I2C1_ReadBurst+0x138>)
 800096a:	699b      	ldr	r3, [r3, #24]

    // Read multiple bytes using auto-increment
    for(uint8_t i = 0; i < length - 1; i++) {
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e016      	b.n	80009a0 <I2C1_ReadBurst+0xec>
        // Keep ACK high to continue reading
        I2C1->CR1 |= I2C_CR1_ACK;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097c:	6013      	str	r3, [r2, #0]
        while(!(I2C1->SR1 & I2C_SR1_RXNE));
 800097e:	bf00      	nop
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <I2C1_ReadBurst+0x138>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f9      	beq.n	8000980 <I2C1_ReadBurst+0xcc>
        buffer[i] = I2C1->DR;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <I2C1_ReadBurst+0x138>)
 800098e:	6919      	ldr	r1, [r3, #16]
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < length - 1; i++) {
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	3301      	adds	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbe3      	blt.n	8000972 <I2C1_ReadBurst+0xbe>
    }

    // Read last byte with NACK
    I2C1->CR1 &= ~I2C_CR1_ACK;
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80009b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80009b4:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_RXNE));
 80009b6:	bf00      	nop
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0f9      	beq.n	80009b8 <I2C1_ReadBurst+0x104>
    buffer[length-1] = I2C1->DR;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80009c6:	6919      	ldr	r1, [r3, #16]
 80009c8:	797b      	ldrb	r3, [r7, #5]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	b2ca      	uxtb	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]

    // Stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <I2C1_ReadBurst+0x138>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40005400 	.word	0x40005400

080009f0 <isDataReady>:

// Modify the isDataReady function to include better checking and logging
uint8_t isDataReady(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	@ 0x38
 80009f4:	af00      	add	r7, sp, #0
    uint8_t status = I2C1_Read(HMC5883L_ADDR, STATUS_REG);
 80009f6:	2109      	movs	r1, #9
 80009f8:	201e      	movs	r0, #30
 80009fa:	f7ff fee1 	bl	80007c0 <I2C1_Read>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    char buffer[50];

    // Check for data lock (overwrite prevented)
    if (status & STATUS_LOCK_MASK) {
 8000a04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00c      	beq.n	8000a2a <isDataReady+0x3a>
        sprintf(buffer, "WARNING: Data lock detected (0x%02X)\r\n", status);
 8000a10:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4917      	ldr	r1, [pc, #92]	@ (8000a74 <isDataReady+0x84>)
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f9f7 	bl	8000e0c <siprintf>
        UART2_SendString(buffer);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f999 	bl	8000d58 <UART2_SendString>
        return 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e020      	b.n	8000a6c <isDataReady+0x7c>
    }

    // Check for data ready
    if (status & STATUS_READY_MASK) {
 8000a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <isDataReady+0x4a>
        return 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e018      	b.n	8000a6c <isDataReady+0x7c>
    }

    // Optional: Log when waiting for too long
    static uint32_t wait_count = 0;
    wait_count++;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <isDataReady+0x88>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <isDataReady+0x88>)
 8000a42:	6013      	str	r3, [r2, #0]
    if (wait_count > 1000) {
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <isDataReady+0x88>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a4c:	d90d      	bls.n	8000a6a <isDataReady+0x7a>
        sprintf(buffer, "INFO: Waiting for data... Status: 0x%02X\r\n", status);
 8000a4e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4909      	ldr	r1, [pc, #36]	@ (8000a7c <isDataReady+0x8c>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f9d8 	bl	8000e0c <siprintf>
        UART2_SendString(buffer);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f97a 	bl	8000d58 <UART2_SendString>
        wait_count = 0;
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <isDataReady+0x88>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3738      	adds	r7, #56	@ 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08001a50 	.word	0x08001a50
 8000a78:	20000070 	.word	0x20000070
 8000a7c:	08001a78 	.word	0x08001a78

08000a80 <main>:
//     return 0;
// }

// Modify main function
int main(void)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b097      	sub	sp, #92	@ 0x5c
 8000a84:	af04      	add	r7, sp, #16
	
   UART2_Init();
 8000a86:	f000 f915 	bl	8000cb4 <UART2_Init>
   UART2_SendString("Hello\n");
 8000a8a:	4848      	ldr	r0, [pc, #288]	@ (8000bac <main+0x12c>)
 8000a8c:	f000 f964 	bl	8000d58 <UART2_SendString>
 
   
   I2C1_Init();
 8000a90:	f7ff fdb2 	bl	80005f8 <I2C1_Init>

   // Initialize HMC5883L
   I2C1_Write(HMC5883L_ADDR, CONFIG_A, 0x70);  // 8-average, 15 Hz
 8000a94:	2270      	movs	r2, #112	@ 0x70
 8000a96:	2100      	movs	r1, #0
 8000a98:	201e      	movs	r0, #30
 8000a9a:	f7ff fe35 	bl	8000708 <I2C1_Write>
   I2C1_Write(HMC5883L_ADDR, CONFIG_B, 0x20);  // Gain=1090 LSB/Gauss
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	201e      	movs	r0, #30
 8000aa4:	f7ff fe30 	bl	8000708 <I2C1_Write>
   I2C1_Write(HMC5883L_ADDR, MODE_REG, 0x00);  // Continuous measurement mode
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	201e      	movs	r0, #30
 8000aae:	f7ff fe2b 	bl	8000708 <I2C1_Write>
   float heading;

   while (1)
   {
       // Wait for new data to be ready
       if(isDataReady())
 8000ab2:	f7ff ff9d 	bl	80009f0 <isDataReady>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d06b      	beq.n	8000b94 <main+0x114>
       {
           // Read all 6 bytes starting from X_MSB using auto-increment
           I2C1_ReadBurst(HMC5883L_ADDR, X_MSB, data, 6);
 8000abc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	201e      	movs	r0, #30
 8000ac6:	f7ff fef5 	bl	80008b4 <I2C1_ReadBurst>

           // Convert the data
           x = (int16_t)((data[0] << 8) | data[1]);  // X axis
 8000aca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
           z = (int16_t)((data[2] << 8) | data[3]);  // Z axis
 8000ae0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
           y = (int16_t)((data[4] << 8) | data[5]);  // Y axis
 8000af6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	87fb      	strh	r3, [r7, #62]	@ 0x3e

           // Calculate heading (optional)
           heading = atan2f((float)y, (float)x) * 180.0f / 3.14159f;
 8000b0a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000b0e:	ee07 3a90 	vmov	s15, r3
 8000b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b16:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000b1a:	ee07 3a10 	vmov	s14, r3
 8000b1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b22:	eef0 0a47 	vmov.f32	s1, s14
 8000b26:	eeb0 0a67 	vmov.f32	s0, s15
 8000b2a:	f000 fe07 	bl	800173c <atan2f>
 8000b2e:	eef0 7a40 	vmov.f32	s15, s0
 8000b32:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000bb0 <main+0x130>
 8000b36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b3a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000bb4 <main+0x134>
 8000b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b42:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
           if(heading < 0) heading += 360.0f;
 8000b46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b52:	d507      	bpl.n	8000b64 <main+0xe4>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b58:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000bb8 <main+0x138>
 8000b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b60:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

           // Format and send via UART
           sprintf(buffer, "X:%d,Y:%d,Z:%d,H:%.1f\r\n", x, y, z, heading);
 8000b64:	f9b7 5042 	ldrsh.w	r5, [r7, #66]	@ 0x42
 8000b68:	f9b7 603e 	ldrsh.w	r6, [r7, #62]	@ 0x3e
 8000b6c:	f9b7 4040 	ldrsh.w	r4, [r7, #64]	@ 0x40
 8000b70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000b72:	f7ff fce9 	bl	8000548 <__aeabi_f2d>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	1d38      	adds	r0, r7, #4
 8000b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b80:	9400      	str	r4, [sp, #0]
 8000b82:	4633      	mov	r3, r6
 8000b84:	462a      	mov	r2, r5
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <main+0x13c>)
 8000b88:	f000 f940 	bl	8000e0c <siprintf>
           UART2_SendString(buffer);
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f8e2 	bl	8000d58 <UART2_SendString>
       }

       // Small delay to prevent overwhelming the I2C bus
       for(volatile int i = 0; i < 100000; i++);
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	e002      	b.n	8000ba0 <main+0x120>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <main+0x140>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	ddf8      	ble.n	8000b9a <main+0x11a>
       if(isDataReady())
 8000ba8:	e783      	b.n	8000ab2 <main+0x32>
 8000baa:	bf00      	nop
 8000bac:	08001aa4 	.word	0x08001aa4
 8000bb0:	43340000 	.word	0x43340000
 8000bb4:	40490fd0 	.word	0x40490fd0
 8000bb8:	43b40000 	.word	0x43b40000
 8000bbc:	08001aac 	.word	0x08001aac
 8000bc0:	0001869f 	.word	0x0001869f

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f8e3 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f000 f8fc 	bl	8000e50 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20018000 	.word	0x20018000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	20000074 	.word	0x20000074
 8000c8c:	200001c8 	.word	0x200001c8

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <UART2_Init>:
// Include the appropriate header file for your STM32F4 series microcontroller
#include <uart.h>
void UART2_Init(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
    // Enable clock for UART2 and GPIOA (PA2 and PA3)
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;   // Enable UART2 clock
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <UART2_Init+0x68>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <UART2_Init+0x68>)
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;     // Enable GPIOA clock
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <UART2_Init+0x68>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <UART2_Init+0x68>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA2 as UART2 TX (Alternate function mode)
    GPIOA->MODER |= GPIO_MODER_MODE2_1;      // PA2: Alternate function
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <UART2_Init+0x6c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <UART2_Init+0x6c>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos); // AF7 (UART2) for PA2
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <UART2_Init+0x6c>)
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d20 <UART2_Init+0x6c>)
 8000ce2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000ce6:	6213      	str	r3, [r2, #32]

    // Configure PA3 as UART2 RX (Alternate function mode)
    GPIOA->MODER |= GPIO_MODER_MODE3_1;      // PA3: Alternate function
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <UART2_Init+0x6c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0c      	ldr	r2, [pc, #48]	@ (8000d20 <UART2_Init+0x6c>)
 8000cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL3_Pos); // AF7 (UART2) for PA3
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <UART2_Init+0x6c>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <UART2_Init+0x6c>)
 8000cfa:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000cfe:	6213      	str	r3, [r2, #32]

    // Configure UART2 settings: Baud Rate = 9600, 8 data bits, 1 stop bit, no parity
    USART2->BRR = 0x0683;   // Baud rate = 9600 (assuming 16 MHz PCLK1)
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <UART2_Init+0x70>)
 8000d02:	f240 6283 	movw	r2, #1667	@ 0x683
 8000d06:	609a      	str	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;  // Enable UART2 transmitter and UART2
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <UART2_Init+0x70>)
 8000d0a:	f242 0208 	movw	r2, #8200	@ 0x2008
 8000d0e:	60da      	str	r2, [r3, #12]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40004400 	.word	0x40004400

08000d28 <UART2_SendChar>:

void UART2_SendChar(char ch)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty) is set
    while (!(USART2->SR & USART_SR_TXE));
 8000d32:	bf00      	nop
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <UART2_SendChar+0x2c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f9      	beq.n	8000d34 <UART2_SendChar+0xc>

    // Send the character
    USART2->DR = ch;
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <UART2_SendChar+0x2c>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	6053      	str	r3, [r2, #4]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400

08000d58 <UART2_SendString>:
void UART2_SendString(char* st ){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
	while (*(st+i)){
 8000d64:	e009      	b.n	8000d7a <UART2_SendString+0x22>
		UART2_SendChar(st[i]);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ffda 	bl	8000d28 <UART2_SendChar>
		i++;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
	while (*(st+i)){
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1ef      	bne.n	8000d66 <UART2_SendString+0xe>
	}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d94:	f7ff ff7c 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f000 f84d 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fe5d 	bl	8000a80 <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000dd4:	08001b40 	.word	0x08001b40
  ldr r2, =_sbss
 8000dd8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000ddc:	200001c4 	.word	0x200001c4

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>
	...

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000078 	.word	0x20000078

08000e0c <siprintf>:
 8000e0c:	b40e      	push	{r1, r2, r3}
 8000e0e:	b510      	push	{r4, lr}
 8000e10:	b09d      	sub	sp, #116	@ 0x74
 8000e12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000e14:	9002      	str	r0, [sp, #8]
 8000e16:	9006      	str	r0, [sp, #24]
 8000e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000e1c:	480a      	ldr	r0, [pc, #40]	@ (8000e48 <siprintf+0x3c>)
 8000e1e:	9107      	str	r1, [sp, #28]
 8000e20:	9104      	str	r1, [sp, #16]
 8000e22:	490a      	ldr	r1, [pc, #40]	@ (8000e4c <siprintf+0x40>)
 8000e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e28:	9105      	str	r1, [sp, #20]
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	a902      	add	r1, sp, #8
 8000e2e:	6800      	ldr	r0, [r0, #0]
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000e34:	f000 f98c 	bl	8001150 <_svfiprintf_r>
 8000e38:	9b02      	ldr	r3, [sp, #8]
 8000e3a:	701c      	strb	r4, [r3, #0]
 8000e3c:	b01d      	add	sp, #116	@ 0x74
 8000e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e42:	b003      	add	sp, #12
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	ffff0208 	.word	0xffff0208

08000e50 <__errno>:
 8000e50:	4b01      	ldr	r3, [pc, #4]	@ (8000e58 <__errno+0x8>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000004 	.word	0x20000004

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000e94 <__libc_init_array+0x38>)
 8000e60:	4c0d      	ldr	r4, [pc, #52]	@ (8000e98 <__libc_init_array+0x3c>)
 8000e62:	1b64      	subs	r4, r4, r5
 8000e64:	10a4      	asrs	r4, r4, #2
 8000e66:	2600      	movs	r6, #0
 8000e68:	42a6      	cmp	r6, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000e9c <__libc_init_array+0x40>)
 8000e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ea0 <__libc_init_array+0x44>)
 8000e70:	f000 fde2 	bl	8001a38 <_init>
 8000e74:	1b64      	subs	r4, r4, r5
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	2600      	movs	r6, #0
 8000e7a:	42a6      	cmp	r6, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e84:	4798      	blx	r3
 8000e86:	3601      	adds	r6, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8e:	4798      	blx	r3
 8000e90:	3601      	adds	r6, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08001b38 	.word	0x08001b38
 8000e98:	08001b38 	.word	0x08001b38
 8000e9c:	08001b38 	.word	0x08001b38
 8000ea0:	08001b3c 	.word	0x08001b3c

08000ea4 <__retarget_lock_acquire_recursive>:
 8000ea4:	4770      	bx	lr

08000ea6 <__retarget_lock_release_recursive>:
 8000ea6:	4770      	bx	lr

08000ea8 <_free_r>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4605      	mov	r5, r0
 8000eac:	2900      	cmp	r1, #0
 8000eae:	d041      	beq.n	8000f34 <_free_r+0x8c>
 8000eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eb4:	1f0c      	subs	r4, r1, #4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bfb8      	it	lt
 8000eba:	18e4      	addlt	r4, r4, r3
 8000ebc:	f000 f8e0 	bl	8001080 <__malloc_lock>
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f38 <_free_r+0x90>)
 8000ec2:	6813      	ldr	r3, [r2, #0]
 8000ec4:	b933      	cbnz	r3, 8000ed4 <_free_r+0x2c>
 8000ec6:	6063      	str	r3, [r4, #4]
 8000ec8:	6014      	str	r4, [r2, #0]
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ed0:	f000 b8dc 	b.w	800108c <__malloc_unlock>
 8000ed4:	42a3      	cmp	r3, r4
 8000ed6:	d908      	bls.n	8000eea <_free_r+0x42>
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	1821      	adds	r1, r4, r0
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf01      	itttt	eq
 8000ee0:	6819      	ldreq	r1, [r3, #0]
 8000ee2:	685b      	ldreq	r3, [r3, #4]
 8000ee4:	1809      	addeq	r1, r1, r0
 8000ee6:	6021      	streq	r1, [r4, #0]
 8000ee8:	e7ed      	b.n	8000ec6 <_free_r+0x1e>
 8000eea:	461a      	mov	r2, r3
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	b10b      	cbz	r3, 8000ef4 <_free_r+0x4c>
 8000ef0:	42a3      	cmp	r3, r4
 8000ef2:	d9fa      	bls.n	8000eea <_free_r+0x42>
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	1850      	adds	r0, r2, r1
 8000ef8:	42a0      	cmp	r0, r4
 8000efa:	d10b      	bne.n	8000f14 <_free_r+0x6c>
 8000efc:	6820      	ldr	r0, [r4, #0]
 8000efe:	4401      	add	r1, r0
 8000f00:	1850      	adds	r0, r2, r1
 8000f02:	4283      	cmp	r3, r0
 8000f04:	6011      	str	r1, [r2, #0]
 8000f06:	d1e0      	bne.n	8000eca <_free_r+0x22>
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	6053      	str	r3, [r2, #4]
 8000f0e:	4408      	add	r0, r1
 8000f10:	6010      	str	r0, [r2, #0]
 8000f12:	e7da      	b.n	8000eca <_free_r+0x22>
 8000f14:	d902      	bls.n	8000f1c <_free_r+0x74>
 8000f16:	230c      	movs	r3, #12
 8000f18:	602b      	str	r3, [r5, #0]
 8000f1a:	e7d6      	b.n	8000eca <_free_r+0x22>
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	1821      	adds	r1, r4, r0
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf04      	itt	eq
 8000f24:	6819      	ldreq	r1, [r3, #0]
 8000f26:	685b      	ldreq	r3, [r3, #4]
 8000f28:	6063      	str	r3, [r4, #4]
 8000f2a:	bf04      	itt	eq
 8000f2c:	1809      	addeq	r1, r1, r0
 8000f2e:	6021      	streq	r1, [r4, #0]
 8000f30:	6054      	str	r4, [r2, #4]
 8000f32:	e7ca      	b.n	8000eca <_free_r+0x22>
 8000f34:	bd38      	pop	{r3, r4, r5, pc}
 8000f36:	bf00      	nop
 8000f38:	200001c0 	.word	0x200001c0

08000f3c <sbrk_aligned>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8000f7c <sbrk_aligned+0x40>)
 8000f40:	460c      	mov	r4, r1
 8000f42:	6831      	ldr	r1, [r6, #0]
 8000f44:	4605      	mov	r5, r0
 8000f46:	b911      	cbnz	r1, 8000f4e <sbrk_aligned+0x12>
 8000f48:	f000 fba4 	bl	8001694 <_sbrk_r>
 8000f4c:	6030      	str	r0, [r6, #0]
 8000f4e:	4621      	mov	r1, r4
 8000f50:	4628      	mov	r0, r5
 8000f52:	f000 fb9f 	bl	8001694 <_sbrk_r>
 8000f56:	1c43      	adds	r3, r0, #1
 8000f58:	d103      	bne.n	8000f62 <sbrk_aligned+0x26>
 8000f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f5e:	4620      	mov	r0, r4
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	1cc4      	adds	r4, r0, #3
 8000f64:	f024 0403 	bic.w	r4, r4, #3
 8000f68:	42a0      	cmp	r0, r4
 8000f6a:	d0f8      	beq.n	8000f5e <sbrk_aligned+0x22>
 8000f6c:	1a21      	subs	r1, r4, r0
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f000 fb90 	bl	8001694 <_sbrk_r>
 8000f74:	3001      	adds	r0, #1
 8000f76:	d1f2      	bne.n	8000f5e <sbrk_aligned+0x22>
 8000f78:	e7ef      	b.n	8000f5a <sbrk_aligned+0x1e>
 8000f7a:	bf00      	nop
 8000f7c:	200001bc 	.word	0x200001bc

08000f80 <_malloc_r>:
 8000f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f84:	1ccd      	adds	r5, r1, #3
 8000f86:	f025 0503 	bic.w	r5, r5, #3
 8000f8a:	3508      	adds	r5, #8
 8000f8c:	2d0c      	cmp	r5, #12
 8000f8e:	bf38      	it	cc
 8000f90:	250c      	movcc	r5, #12
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	4606      	mov	r6, r0
 8000f96:	db01      	blt.n	8000f9c <_malloc_r+0x1c>
 8000f98:	42a9      	cmp	r1, r5
 8000f9a:	d904      	bls.n	8000fa6 <_malloc_r+0x26>
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	6033      	str	r3, [r6, #0]
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800107c <_malloc_r+0xfc>
 8000faa:	f000 f869 	bl	8001080 <__malloc_lock>
 8000fae:	f8d8 3000 	ldr.w	r3, [r8]
 8000fb2:	461c      	mov	r4, r3
 8000fb4:	bb44      	cbnz	r4, 8001008 <_malloc_r+0x88>
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff ffbf 	bl	8000f3c <sbrk_aligned>
 8000fbe:	1c43      	adds	r3, r0, #1
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	d158      	bne.n	8001076 <_malloc_r+0xf6>
 8000fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8000fc8:	4627      	mov	r7, r4
 8000fca:	2f00      	cmp	r7, #0
 8000fcc:	d143      	bne.n	8001056 <_malloc_r+0xd6>
 8000fce:	2c00      	cmp	r4, #0
 8000fd0:	d04b      	beq.n	800106a <_malloc_r+0xea>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	eb04 0903 	add.w	r9, r4, r3
 8000fdc:	f000 fb5a 	bl	8001694 <_sbrk_r>
 8000fe0:	4581      	cmp	r9, r0
 8000fe2:	d142      	bne.n	800106a <_malloc_r+0xea>
 8000fe4:	6821      	ldr	r1, [r4, #0]
 8000fe6:	1a6d      	subs	r5, r5, r1
 8000fe8:	4629      	mov	r1, r5
 8000fea:	4630      	mov	r0, r6
 8000fec:	f7ff ffa6 	bl	8000f3c <sbrk_aligned>
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	d03a      	beq.n	800106a <_malloc_r+0xea>
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	442b      	add	r3, r5
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	bb62      	cbnz	r2, 800105c <_malloc_r+0xdc>
 8001002:	f8c8 7000 	str.w	r7, [r8]
 8001006:	e00f      	b.n	8001028 <_malloc_r+0xa8>
 8001008:	6822      	ldr	r2, [r4, #0]
 800100a:	1b52      	subs	r2, r2, r5
 800100c:	d420      	bmi.n	8001050 <_malloc_r+0xd0>
 800100e:	2a0b      	cmp	r2, #11
 8001010:	d917      	bls.n	8001042 <_malloc_r+0xc2>
 8001012:	1961      	adds	r1, r4, r5
 8001014:	42a3      	cmp	r3, r4
 8001016:	6025      	str	r5, [r4, #0]
 8001018:	bf18      	it	ne
 800101a:	6059      	strne	r1, [r3, #4]
 800101c:	6863      	ldr	r3, [r4, #4]
 800101e:	bf08      	it	eq
 8001020:	f8c8 1000 	streq.w	r1, [r8]
 8001024:	5162      	str	r2, [r4, r5]
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	4630      	mov	r0, r6
 800102a:	f000 f82f 	bl	800108c <__malloc_unlock>
 800102e:	f104 000b 	add.w	r0, r4, #11
 8001032:	1d23      	adds	r3, r4, #4
 8001034:	f020 0007 	bic.w	r0, r0, #7
 8001038:	1ac2      	subs	r2, r0, r3
 800103a:	bf1c      	itt	ne
 800103c:	1a1b      	subne	r3, r3, r0
 800103e:	50a3      	strne	r3, [r4, r2]
 8001040:	e7af      	b.n	8000fa2 <_malloc_r+0x22>
 8001042:	6862      	ldr	r2, [r4, #4]
 8001044:	42a3      	cmp	r3, r4
 8001046:	bf0c      	ite	eq
 8001048:	f8c8 2000 	streq.w	r2, [r8]
 800104c:	605a      	strne	r2, [r3, #4]
 800104e:	e7eb      	b.n	8001028 <_malloc_r+0xa8>
 8001050:	4623      	mov	r3, r4
 8001052:	6864      	ldr	r4, [r4, #4]
 8001054:	e7ae      	b.n	8000fb4 <_malloc_r+0x34>
 8001056:	463c      	mov	r4, r7
 8001058:	687f      	ldr	r7, [r7, #4]
 800105a:	e7b6      	b.n	8000fca <_malloc_r+0x4a>
 800105c:	461a      	mov	r2, r3
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	42a3      	cmp	r3, r4
 8001062:	d1fb      	bne.n	800105c <_malloc_r+0xdc>
 8001064:	2300      	movs	r3, #0
 8001066:	6053      	str	r3, [r2, #4]
 8001068:	e7de      	b.n	8001028 <_malloc_r+0xa8>
 800106a:	230c      	movs	r3, #12
 800106c:	6033      	str	r3, [r6, #0]
 800106e:	4630      	mov	r0, r6
 8001070:	f000 f80c 	bl	800108c <__malloc_unlock>
 8001074:	e794      	b.n	8000fa0 <_malloc_r+0x20>
 8001076:	6005      	str	r5, [r0, #0]
 8001078:	e7d6      	b.n	8001028 <_malloc_r+0xa8>
 800107a:	bf00      	nop
 800107c:	200001c0 	.word	0x200001c0

08001080 <__malloc_lock>:
 8001080:	4801      	ldr	r0, [pc, #4]	@ (8001088 <__malloc_lock+0x8>)
 8001082:	f7ff bf0f 	b.w	8000ea4 <__retarget_lock_acquire_recursive>
 8001086:	bf00      	nop
 8001088:	200001b8 	.word	0x200001b8

0800108c <__malloc_unlock>:
 800108c:	4801      	ldr	r0, [pc, #4]	@ (8001094 <__malloc_unlock+0x8>)
 800108e:	f7ff bf0a 	b.w	8000ea6 <__retarget_lock_release_recursive>
 8001092:	bf00      	nop
 8001094:	200001b8 	.word	0x200001b8

08001098 <__ssputs_r>:
 8001098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800109c:	688e      	ldr	r6, [r1, #8]
 800109e:	461f      	mov	r7, r3
 80010a0:	42be      	cmp	r6, r7
 80010a2:	680b      	ldr	r3, [r1, #0]
 80010a4:	4682      	mov	sl, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	4690      	mov	r8, r2
 80010aa:	d82d      	bhi.n	8001108 <__ssputs_r+0x70>
 80010ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80010b4:	d026      	beq.n	8001104 <__ssputs_r+0x6c>
 80010b6:	6965      	ldr	r5, [r4, #20]
 80010b8:	6909      	ldr	r1, [r1, #16]
 80010ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010be:	eba3 0901 	sub.w	r9, r3, r1
 80010c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80010c6:	1c7b      	adds	r3, r7, #1
 80010c8:	444b      	add	r3, r9
 80010ca:	106d      	asrs	r5, r5, #1
 80010cc:	429d      	cmp	r5, r3
 80010ce:	bf38      	it	cc
 80010d0:	461d      	movcc	r5, r3
 80010d2:	0553      	lsls	r3, r2, #21
 80010d4:	d527      	bpl.n	8001126 <__ssputs_r+0x8e>
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff ff52 	bl	8000f80 <_malloc_r>
 80010dc:	4606      	mov	r6, r0
 80010de:	b360      	cbz	r0, 800113a <__ssputs_r+0xa2>
 80010e0:	6921      	ldr	r1, [r4, #16]
 80010e2:	464a      	mov	r2, r9
 80010e4:	f000 fae6 	bl	80016b4 <memcpy>
 80010e8:	89a3      	ldrh	r3, [r4, #12]
 80010ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80010ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f2:	81a3      	strh	r3, [r4, #12]
 80010f4:	6126      	str	r6, [r4, #16]
 80010f6:	6165      	str	r5, [r4, #20]
 80010f8:	444e      	add	r6, r9
 80010fa:	eba5 0509 	sub.w	r5, r5, r9
 80010fe:	6026      	str	r6, [r4, #0]
 8001100:	60a5      	str	r5, [r4, #8]
 8001102:	463e      	mov	r6, r7
 8001104:	42be      	cmp	r6, r7
 8001106:	d900      	bls.n	800110a <__ssputs_r+0x72>
 8001108:	463e      	mov	r6, r7
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	4632      	mov	r2, r6
 800110e:	4641      	mov	r1, r8
 8001110:	f000 faa6 	bl	8001660 <memmove>
 8001114:	68a3      	ldr	r3, [r4, #8]
 8001116:	1b9b      	subs	r3, r3, r6
 8001118:	60a3      	str	r3, [r4, #8]
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	4433      	add	r3, r6
 800111e:	6023      	str	r3, [r4, #0]
 8001120:	2000      	movs	r0, #0
 8001122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001126:	462a      	mov	r2, r5
 8001128:	f000 fad2 	bl	80016d0 <_realloc_r>
 800112c:	4606      	mov	r6, r0
 800112e:	2800      	cmp	r0, #0
 8001130:	d1e0      	bne.n	80010f4 <__ssputs_r+0x5c>
 8001132:	6921      	ldr	r1, [r4, #16]
 8001134:	4650      	mov	r0, sl
 8001136:	f7ff feb7 	bl	8000ea8 <_free_r>
 800113a:	230c      	movs	r3, #12
 800113c:	f8ca 3000 	str.w	r3, [sl]
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001146:	81a3      	strh	r3, [r4, #12]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	e7e9      	b.n	8001122 <__ssputs_r+0x8a>
	...

08001150 <_svfiprintf_r>:
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	4698      	mov	r8, r3
 8001156:	898b      	ldrh	r3, [r1, #12]
 8001158:	061b      	lsls	r3, r3, #24
 800115a:	b09d      	sub	sp, #116	@ 0x74
 800115c:	4607      	mov	r7, r0
 800115e:	460d      	mov	r5, r1
 8001160:	4614      	mov	r4, r2
 8001162:	d510      	bpl.n	8001186 <_svfiprintf_r+0x36>
 8001164:	690b      	ldr	r3, [r1, #16]
 8001166:	b973      	cbnz	r3, 8001186 <_svfiprintf_r+0x36>
 8001168:	2140      	movs	r1, #64	@ 0x40
 800116a:	f7ff ff09 	bl	8000f80 <_malloc_r>
 800116e:	6028      	str	r0, [r5, #0]
 8001170:	6128      	str	r0, [r5, #16]
 8001172:	b930      	cbnz	r0, 8001182 <_svfiprintf_r+0x32>
 8001174:	230c      	movs	r3, #12
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	b01d      	add	sp, #116	@ 0x74
 800117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001182:	2340      	movs	r3, #64	@ 0x40
 8001184:	616b      	str	r3, [r5, #20]
 8001186:	2300      	movs	r3, #0
 8001188:	9309      	str	r3, [sp, #36]	@ 0x24
 800118a:	2320      	movs	r3, #32
 800118c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001190:	f8cd 800c 	str.w	r8, [sp, #12]
 8001194:	2330      	movs	r3, #48	@ 0x30
 8001196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001334 <_svfiprintf_r+0x1e4>
 800119a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800119e:	f04f 0901 	mov.w	r9, #1
 80011a2:	4623      	mov	r3, r4
 80011a4:	469a      	mov	sl, r3
 80011a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011aa:	b10a      	cbz	r2, 80011b0 <_svfiprintf_r+0x60>
 80011ac:	2a25      	cmp	r2, #37	@ 0x25
 80011ae:	d1f9      	bne.n	80011a4 <_svfiprintf_r+0x54>
 80011b0:	ebba 0b04 	subs.w	fp, sl, r4
 80011b4:	d00b      	beq.n	80011ce <_svfiprintf_r+0x7e>
 80011b6:	465b      	mov	r3, fp
 80011b8:	4622      	mov	r2, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	4638      	mov	r0, r7
 80011be:	f7ff ff6b 	bl	8001098 <__ssputs_r>
 80011c2:	3001      	adds	r0, #1
 80011c4:	f000 80a7 	beq.w	8001316 <_svfiprintf_r+0x1c6>
 80011c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011ca:	445a      	add	r2, fp
 80011cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80011ce:	f89a 3000 	ldrb.w	r3, [sl]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 809f 	beq.w	8001316 <_svfiprintf_r+0x1c6>
 80011d8:	2300      	movs	r3, #0
 80011da:	f04f 32ff 	mov.w	r2, #4294967295
 80011de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011e2:	f10a 0a01 	add.w	sl, sl, #1
 80011e6:	9304      	str	r3, [sp, #16]
 80011e8:	9307      	str	r3, [sp, #28]
 80011ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80011ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80011f0:	4654      	mov	r4, sl
 80011f2:	2205      	movs	r2, #5
 80011f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011f8:	484e      	ldr	r0, [pc, #312]	@ (8001334 <_svfiprintf_r+0x1e4>)
 80011fa:	f7fe fff1 	bl	80001e0 <memchr>
 80011fe:	9a04      	ldr	r2, [sp, #16]
 8001200:	b9d8      	cbnz	r0, 800123a <_svfiprintf_r+0xea>
 8001202:	06d0      	lsls	r0, r2, #27
 8001204:	bf44      	itt	mi
 8001206:	2320      	movmi	r3, #32
 8001208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800120c:	0711      	lsls	r1, r2, #28
 800120e:	bf44      	itt	mi
 8001210:	232b      	movmi	r3, #43	@ 0x2b
 8001212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001216:	f89a 3000 	ldrb.w	r3, [sl]
 800121a:	2b2a      	cmp	r3, #42	@ 0x2a
 800121c:	d015      	beq.n	800124a <_svfiprintf_r+0xfa>
 800121e:	9a07      	ldr	r2, [sp, #28]
 8001220:	4654      	mov	r4, sl
 8001222:	2000      	movs	r0, #0
 8001224:	f04f 0c0a 	mov.w	ip, #10
 8001228:	4621      	mov	r1, r4
 800122a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800122e:	3b30      	subs	r3, #48	@ 0x30
 8001230:	2b09      	cmp	r3, #9
 8001232:	d94b      	bls.n	80012cc <_svfiprintf_r+0x17c>
 8001234:	b1b0      	cbz	r0, 8001264 <_svfiprintf_r+0x114>
 8001236:	9207      	str	r2, [sp, #28]
 8001238:	e014      	b.n	8001264 <_svfiprintf_r+0x114>
 800123a:	eba0 0308 	sub.w	r3, r0, r8
 800123e:	fa09 f303 	lsl.w	r3, r9, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	9304      	str	r3, [sp, #16]
 8001246:	46a2      	mov	sl, r4
 8001248:	e7d2      	b.n	80011f0 <_svfiprintf_r+0xa0>
 800124a:	9b03      	ldr	r3, [sp, #12]
 800124c:	1d19      	adds	r1, r3, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	9103      	str	r1, [sp, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfbb      	ittet	lt
 8001256:	425b      	neglt	r3, r3
 8001258:	f042 0202 	orrlt.w	r2, r2, #2
 800125c:	9307      	strge	r3, [sp, #28]
 800125e:	9307      	strlt	r3, [sp, #28]
 8001260:	bfb8      	it	lt
 8001262:	9204      	strlt	r2, [sp, #16]
 8001264:	7823      	ldrb	r3, [r4, #0]
 8001266:	2b2e      	cmp	r3, #46	@ 0x2e
 8001268:	d10a      	bne.n	8001280 <_svfiprintf_r+0x130>
 800126a:	7863      	ldrb	r3, [r4, #1]
 800126c:	2b2a      	cmp	r3, #42	@ 0x2a
 800126e:	d132      	bne.n	80012d6 <_svfiprintf_r+0x186>
 8001270:	9b03      	ldr	r3, [sp, #12]
 8001272:	1d1a      	adds	r2, r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	9203      	str	r2, [sp, #12]
 8001278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800127c:	3402      	adds	r4, #2
 800127e:	9305      	str	r3, [sp, #20]
 8001280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001344 <_svfiprintf_r+0x1f4>
 8001284:	7821      	ldrb	r1, [r4, #0]
 8001286:	2203      	movs	r2, #3
 8001288:	4650      	mov	r0, sl
 800128a:	f7fe ffa9 	bl	80001e0 <memchr>
 800128e:	b138      	cbz	r0, 80012a0 <_svfiprintf_r+0x150>
 8001290:	9b04      	ldr	r3, [sp, #16]
 8001292:	eba0 000a 	sub.w	r0, r0, sl
 8001296:	2240      	movs	r2, #64	@ 0x40
 8001298:	4082      	lsls	r2, r0
 800129a:	4313      	orrs	r3, r2
 800129c:	3401      	adds	r4, #1
 800129e:	9304      	str	r3, [sp, #16]
 80012a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012a4:	4824      	ldr	r0, [pc, #144]	@ (8001338 <_svfiprintf_r+0x1e8>)
 80012a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012aa:	2206      	movs	r2, #6
 80012ac:	f7fe ff98 	bl	80001e0 <memchr>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d036      	beq.n	8001322 <_svfiprintf_r+0x1d2>
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <_svfiprintf_r+0x1ec>)
 80012b6:	bb1b      	cbnz	r3, 8001300 <_svfiprintf_r+0x1b0>
 80012b8:	9b03      	ldr	r3, [sp, #12]
 80012ba:	3307      	adds	r3, #7
 80012bc:	f023 0307 	bic.w	r3, r3, #7
 80012c0:	3308      	adds	r3, #8
 80012c2:	9303      	str	r3, [sp, #12]
 80012c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012c6:	4433      	add	r3, r6
 80012c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ca:	e76a      	b.n	80011a2 <_svfiprintf_r+0x52>
 80012cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80012d0:	460c      	mov	r4, r1
 80012d2:	2001      	movs	r0, #1
 80012d4:	e7a8      	b.n	8001228 <_svfiprintf_r+0xd8>
 80012d6:	2300      	movs	r3, #0
 80012d8:	3401      	adds	r4, #1
 80012da:	9305      	str	r3, [sp, #20]
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 0c0a 	mov.w	ip, #10
 80012e2:	4620      	mov	r0, r4
 80012e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012e8:	3a30      	subs	r2, #48	@ 0x30
 80012ea:	2a09      	cmp	r2, #9
 80012ec:	d903      	bls.n	80012f6 <_svfiprintf_r+0x1a6>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0c6      	beq.n	8001280 <_svfiprintf_r+0x130>
 80012f2:	9105      	str	r1, [sp, #20]
 80012f4:	e7c4      	b.n	8001280 <_svfiprintf_r+0x130>
 80012f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80012fa:	4604      	mov	r4, r0
 80012fc:	2301      	movs	r3, #1
 80012fe:	e7f0      	b.n	80012e2 <_svfiprintf_r+0x192>
 8001300:	ab03      	add	r3, sp, #12
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	462a      	mov	r2, r5
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <_svfiprintf_r+0x1f0>)
 8001308:	a904      	add	r1, sp, #16
 800130a:	4638      	mov	r0, r7
 800130c:	f3af 8000 	nop.w
 8001310:	1c42      	adds	r2, r0, #1
 8001312:	4606      	mov	r6, r0
 8001314:	d1d6      	bne.n	80012c4 <_svfiprintf_r+0x174>
 8001316:	89ab      	ldrh	r3, [r5, #12]
 8001318:	065b      	lsls	r3, r3, #25
 800131a:	f53f af2d 	bmi.w	8001178 <_svfiprintf_r+0x28>
 800131e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001320:	e72c      	b.n	800117c <_svfiprintf_r+0x2c>
 8001322:	ab03      	add	r3, sp, #12
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	462a      	mov	r2, r5
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <_svfiprintf_r+0x1f0>)
 800132a:	a904      	add	r1, sp, #16
 800132c:	4638      	mov	r0, r7
 800132e:	f000 f879 	bl	8001424 <_printf_i>
 8001332:	e7ed      	b.n	8001310 <_svfiprintf_r+0x1c0>
 8001334:	08001ac4 	.word	0x08001ac4
 8001338:	08001ace 	.word	0x08001ace
 800133c:	00000000 	.word	0x00000000
 8001340:	08001099 	.word	0x08001099
 8001344:	08001aca 	.word	0x08001aca

08001348 <_printf_common>:
 8001348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800134c:	4616      	mov	r6, r2
 800134e:	4698      	mov	r8, r3
 8001350:	688a      	ldr	r2, [r1, #8]
 8001352:	690b      	ldr	r3, [r1, #16]
 8001354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001358:	4293      	cmp	r3, r2
 800135a:	bfb8      	it	lt
 800135c:	4613      	movlt	r3, r2
 800135e:	6033      	str	r3, [r6, #0]
 8001360:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001364:	4607      	mov	r7, r0
 8001366:	460c      	mov	r4, r1
 8001368:	b10a      	cbz	r2, 800136e <_printf_common+0x26>
 800136a:	3301      	adds	r3, #1
 800136c:	6033      	str	r3, [r6, #0]
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	0699      	lsls	r1, r3, #26
 8001372:	bf42      	ittt	mi
 8001374:	6833      	ldrmi	r3, [r6, #0]
 8001376:	3302      	addmi	r3, #2
 8001378:	6033      	strmi	r3, [r6, #0]
 800137a:	6825      	ldr	r5, [r4, #0]
 800137c:	f015 0506 	ands.w	r5, r5, #6
 8001380:	d106      	bne.n	8001390 <_printf_common+0x48>
 8001382:	f104 0a19 	add.w	sl, r4, #25
 8001386:	68e3      	ldr	r3, [r4, #12]
 8001388:	6832      	ldr	r2, [r6, #0]
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	42ab      	cmp	r3, r5
 800138e:	dc26      	bgt.n	80013de <_printf_common+0x96>
 8001390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	3b00      	subs	r3, #0
 8001398:	bf18      	it	ne
 800139a:	2301      	movne	r3, #1
 800139c:	0692      	lsls	r2, r2, #26
 800139e:	d42b      	bmi.n	80013f8 <_printf_common+0xb0>
 80013a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013a4:	4641      	mov	r1, r8
 80013a6:	4638      	mov	r0, r7
 80013a8:	47c8      	blx	r9
 80013aa:	3001      	adds	r0, #1
 80013ac:	d01e      	beq.n	80013ec <_printf_common+0xa4>
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	6922      	ldr	r2, [r4, #16]
 80013b2:	f003 0306 	and.w	r3, r3, #6
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf02      	ittt	eq
 80013ba:	68e5      	ldreq	r5, [r4, #12]
 80013bc:	6833      	ldreq	r3, [r6, #0]
 80013be:	1aed      	subeq	r5, r5, r3
 80013c0:	68a3      	ldr	r3, [r4, #8]
 80013c2:	bf0c      	ite	eq
 80013c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013c8:	2500      	movne	r5, #0
 80013ca:	4293      	cmp	r3, r2
 80013cc:	bfc4      	itt	gt
 80013ce:	1a9b      	subgt	r3, r3, r2
 80013d0:	18ed      	addgt	r5, r5, r3
 80013d2:	2600      	movs	r6, #0
 80013d4:	341a      	adds	r4, #26
 80013d6:	42b5      	cmp	r5, r6
 80013d8:	d11a      	bne.n	8001410 <_printf_common+0xc8>
 80013da:	2000      	movs	r0, #0
 80013dc:	e008      	b.n	80013f0 <_printf_common+0xa8>
 80013de:	2301      	movs	r3, #1
 80013e0:	4652      	mov	r2, sl
 80013e2:	4641      	mov	r1, r8
 80013e4:	4638      	mov	r0, r7
 80013e6:	47c8      	blx	r9
 80013e8:	3001      	adds	r0, #1
 80013ea:	d103      	bne.n	80013f4 <_printf_common+0xac>
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f4:	3501      	adds	r5, #1
 80013f6:	e7c6      	b.n	8001386 <_printf_common+0x3e>
 80013f8:	18e1      	adds	r1, r4, r3
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	2030      	movs	r0, #48	@ 0x30
 80013fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001402:	4422      	add	r2, r4
 8001404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800140c:	3302      	adds	r3, #2
 800140e:	e7c7      	b.n	80013a0 <_printf_common+0x58>
 8001410:	2301      	movs	r3, #1
 8001412:	4622      	mov	r2, r4
 8001414:	4641      	mov	r1, r8
 8001416:	4638      	mov	r0, r7
 8001418:	47c8      	blx	r9
 800141a:	3001      	adds	r0, #1
 800141c:	d0e6      	beq.n	80013ec <_printf_common+0xa4>
 800141e:	3601      	adds	r6, #1
 8001420:	e7d9      	b.n	80013d6 <_printf_common+0x8e>
	...

08001424 <_printf_i>:
 8001424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001428:	7e0f      	ldrb	r7, [r1, #24]
 800142a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800142c:	2f78      	cmp	r7, #120	@ 0x78
 800142e:	4691      	mov	r9, r2
 8001430:	4680      	mov	r8, r0
 8001432:	460c      	mov	r4, r1
 8001434:	469a      	mov	sl, r3
 8001436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800143a:	d807      	bhi.n	800144c <_printf_i+0x28>
 800143c:	2f62      	cmp	r7, #98	@ 0x62
 800143e:	d80a      	bhi.n	8001456 <_printf_i+0x32>
 8001440:	2f00      	cmp	r7, #0
 8001442:	f000 80d1 	beq.w	80015e8 <_printf_i+0x1c4>
 8001446:	2f58      	cmp	r7, #88	@ 0x58
 8001448:	f000 80b8 	beq.w	80015bc <_printf_i+0x198>
 800144c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001454:	e03a      	b.n	80014cc <_printf_i+0xa8>
 8001456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800145a:	2b15      	cmp	r3, #21
 800145c:	d8f6      	bhi.n	800144c <_printf_i+0x28>
 800145e:	a101      	add	r1, pc, #4	@ (adr r1, 8001464 <_printf_i+0x40>)
 8001460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001464:	080014bd 	.word	0x080014bd
 8001468:	080014d1 	.word	0x080014d1
 800146c:	0800144d 	.word	0x0800144d
 8001470:	0800144d 	.word	0x0800144d
 8001474:	0800144d 	.word	0x0800144d
 8001478:	0800144d 	.word	0x0800144d
 800147c:	080014d1 	.word	0x080014d1
 8001480:	0800144d 	.word	0x0800144d
 8001484:	0800144d 	.word	0x0800144d
 8001488:	0800144d 	.word	0x0800144d
 800148c:	0800144d 	.word	0x0800144d
 8001490:	080015cf 	.word	0x080015cf
 8001494:	080014fb 	.word	0x080014fb
 8001498:	08001589 	.word	0x08001589
 800149c:	0800144d 	.word	0x0800144d
 80014a0:	0800144d 	.word	0x0800144d
 80014a4:	080015f1 	.word	0x080015f1
 80014a8:	0800144d 	.word	0x0800144d
 80014ac:	080014fb 	.word	0x080014fb
 80014b0:	0800144d 	.word	0x0800144d
 80014b4:	0800144d 	.word	0x0800144d
 80014b8:	08001591 	.word	0x08001591
 80014bc:	6833      	ldr	r3, [r6, #0]
 80014be:	1d1a      	adds	r2, r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6032      	str	r2, [r6, #0]
 80014c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014cc:	2301      	movs	r3, #1
 80014ce:	e09c      	b.n	800160a <_printf_i+0x1e6>
 80014d0:	6833      	ldr	r3, [r6, #0]
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	1d19      	adds	r1, r3, #4
 80014d6:	6031      	str	r1, [r6, #0]
 80014d8:	0606      	lsls	r6, r0, #24
 80014da:	d501      	bpl.n	80014e0 <_printf_i+0xbc>
 80014dc:	681d      	ldr	r5, [r3, #0]
 80014de:	e003      	b.n	80014e8 <_printf_i+0xc4>
 80014e0:	0645      	lsls	r5, r0, #25
 80014e2:	d5fb      	bpl.n	80014dc <_printf_i+0xb8>
 80014e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	da03      	bge.n	80014f4 <_printf_i+0xd0>
 80014ec:	232d      	movs	r3, #45	@ 0x2d
 80014ee:	426d      	negs	r5, r5
 80014f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014f4:	4858      	ldr	r0, [pc, #352]	@ (8001658 <_printf_i+0x234>)
 80014f6:	230a      	movs	r3, #10
 80014f8:	e011      	b.n	800151e <_printf_i+0xfa>
 80014fa:	6821      	ldr	r1, [r4, #0]
 80014fc:	6833      	ldr	r3, [r6, #0]
 80014fe:	0608      	lsls	r0, r1, #24
 8001500:	f853 5b04 	ldr.w	r5, [r3], #4
 8001504:	d402      	bmi.n	800150c <_printf_i+0xe8>
 8001506:	0649      	lsls	r1, r1, #25
 8001508:	bf48      	it	mi
 800150a:	b2ad      	uxthmi	r5, r5
 800150c:	2f6f      	cmp	r7, #111	@ 0x6f
 800150e:	4852      	ldr	r0, [pc, #328]	@ (8001658 <_printf_i+0x234>)
 8001510:	6033      	str	r3, [r6, #0]
 8001512:	bf14      	ite	ne
 8001514:	230a      	movne	r3, #10
 8001516:	2308      	moveq	r3, #8
 8001518:	2100      	movs	r1, #0
 800151a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800151e:	6866      	ldr	r6, [r4, #4]
 8001520:	60a6      	str	r6, [r4, #8]
 8001522:	2e00      	cmp	r6, #0
 8001524:	db05      	blt.n	8001532 <_printf_i+0x10e>
 8001526:	6821      	ldr	r1, [r4, #0]
 8001528:	432e      	orrs	r6, r5
 800152a:	f021 0104 	bic.w	r1, r1, #4
 800152e:	6021      	str	r1, [r4, #0]
 8001530:	d04b      	beq.n	80015ca <_printf_i+0x1a6>
 8001532:	4616      	mov	r6, r2
 8001534:	fbb5 f1f3 	udiv	r1, r5, r3
 8001538:	fb03 5711 	mls	r7, r3, r1, r5
 800153c:	5dc7      	ldrb	r7, [r0, r7]
 800153e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001542:	462f      	mov	r7, r5
 8001544:	42bb      	cmp	r3, r7
 8001546:	460d      	mov	r5, r1
 8001548:	d9f4      	bls.n	8001534 <_printf_i+0x110>
 800154a:	2b08      	cmp	r3, #8
 800154c:	d10b      	bne.n	8001566 <_printf_i+0x142>
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	07df      	lsls	r7, r3, #31
 8001552:	d508      	bpl.n	8001566 <_printf_i+0x142>
 8001554:	6923      	ldr	r3, [r4, #16]
 8001556:	6861      	ldr	r1, [r4, #4]
 8001558:	4299      	cmp	r1, r3
 800155a:	bfde      	ittt	le
 800155c:	2330      	movle	r3, #48	@ 0x30
 800155e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001562:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001566:	1b92      	subs	r2, r2, r6
 8001568:	6122      	str	r2, [r4, #16]
 800156a:	f8cd a000 	str.w	sl, [sp]
 800156e:	464b      	mov	r3, r9
 8001570:	aa03      	add	r2, sp, #12
 8001572:	4621      	mov	r1, r4
 8001574:	4640      	mov	r0, r8
 8001576:	f7ff fee7 	bl	8001348 <_printf_common>
 800157a:	3001      	adds	r0, #1
 800157c:	d14a      	bne.n	8001614 <_printf_i+0x1f0>
 800157e:	f04f 30ff 	mov.w	r0, #4294967295
 8001582:	b004      	add	sp, #16
 8001584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	f043 0320 	orr.w	r3, r3, #32
 800158e:	6023      	str	r3, [r4, #0]
 8001590:	4832      	ldr	r0, [pc, #200]	@ (800165c <_printf_i+0x238>)
 8001592:	2778      	movs	r7, #120	@ 0x78
 8001594:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	6831      	ldr	r1, [r6, #0]
 800159c:	061f      	lsls	r7, r3, #24
 800159e:	f851 5b04 	ldr.w	r5, [r1], #4
 80015a2:	d402      	bmi.n	80015aa <_printf_i+0x186>
 80015a4:	065f      	lsls	r7, r3, #25
 80015a6:	bf48      	it	mi
 80015a8:	b2ad      	uxthmi	r5, r5
 80015aa:	6031      	str	r1, [r6, #0]
 80015ac:	07d9      	lsls	r1, r3, #31
 80015ae:	bf44      	itt	mi
 80015b0:	f043 0320 	orrmi.w	r3, r3, #32
 80015b4:	6023      	strmi	r3, [r4, #0]
 80015b6:	b11d      	cbz	r5, 80015c0 <_printf_i+0x19c>
 80015b8:	2310      	movs	r3, #16
 80015ba:	e7ad      	b.n	8001518 <_printf_i+0xf4>
 80015bc:	4826      	ldr	r0, [pc, #152]	@ (8001658 <_printf_i+0x234>)
 80015be:	e7e9      	b.n	8001594 <_printf_i+0x170>
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	f023 0320 	bic.w	r3, r3, #32
 80015c6:	6023      	str	r3, [r4, #0]
 80015c8:	e7f6      	b.n	80015b8 <_printf_i+0x194>
 80015ca:	4616      	mov	r6, r2
 80015cc:	e7bd      	b.n	800154a <_printf_i+0x126>
 80015ce:	6833      	ldr	r3, [r6, #0]
 80015d0:	6825      	ldr	r5, [r4, #0]
 80015d2:	6961      	ldr	r1, [r4, #20]
 80015d4:	1d18      	adds	r0, r3, #4
 80015d6:	6030      	str	r0, [r6, #0]
 80015d8:	062e      	lsls	r6, r5, #24
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	d501      	bpl.n	80015e2 <_printf_i+0x1be>
 80015de:	6019      	str	r1, [r3, #0]
 80015e0:	e002      	b.n	80015e8 <_printf_i+0x1c4>
 80015e2:	0668      	lsls	r0, r5, #25
 80015e4:	d5fb      	bpl.n	80015de <_printf_i+0x1ba>
 80015e6:	8019      	strh	r1, [r3, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	6123      	str	r3, [r4, #16]
 80015ec:	4616      	mov	r6, r2
 80015ee:	e7bc      	b.n	800156a <_printf_i+0x146>
 80015f0:	6833      	ldr	r3, [r6, #0]
 80015f2:	1d1a      	adds	r2, r3, #4
 80015f4:	6032      	str	r2, [r6, #0]
 80015f6:	681e      	ldr	r6, [r3, #0]
 80015f8:	6862      	ldr	r2, [r4, #4]
 80015fa:	2100      	movs	r1, #0
 80015fc:	4630      	mov	r0, r6
 80015fe:	f7fe fdef 	bl	80001e0 <memchr>
 8001602:	b108      	cbz	r0, 8001608 <_printf_i+0x1e4>
 8001604:	1b80      	subs	r0, r0, r6
 8001606:	6060      	str	r0, [r4, #4]
 8001608:	6863      	ldr	r3, [r4, #4]
 800160a:	6123      	str	r3, [r4, #16]
 800160c:	2300      	movs	r3, #0
 800160e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001612:	e7aa      	b.n	800156a <_printf_i+0x146>
 8001614:	6923      	ldr	r3, [r4, #16]
 8001616:	4632      	mov	r2, r6
 8001618:	4649      	mov	r1, r9
 800161a:	4640      	mov	r0, r8
 800161c:	47d0      	blx	sl
 800161e:	3001      	adds	r0, #1
 8001620:	d0ad      	beq.n	800157e <_printf_i+0x15a>
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	079b      	lsls	r3, r3, #30
 8001626:	d413      	bmi.n	8001650 <_printf_i+0x22c>
 8001628:	68e0      	ldr	r0, [r4, #12]
 800162a:	9b03      	ldr	r3, [sp, #12]
 800162c:	4298      	cmp	r0, r3
 800162e:	bfb8      	it	lt
 8001630:	4618      	movlt	r0, r3
 8001632:	e7a6      	b.n	8001582 <_printf_i+0x15e>
 8001634:	2301      	movs	r3, #1
 8001636:	4632      	mov	r2, r6
 8001638:	4649      	mov	r1, r9
 800163a:	4640      	mov	r0, r8
 800163c:	47d0      	blx	sl
 800163e:	3001      	adds	r0, #1
 8001640:	d09d      	beq.n	800157e <_printf_i+0x15a>
 8001642:	3501      	adds	r5, #1
 8001644:	68e3      	ldr	r3, [r4, #12]
 8001646:	9903      	ldr	r1, [sp, #12]
 8001648:	1a5b      	subs	r3, r3, r1
 800164a:	42ab      	cmp	r3, r5
 800164c:	dcf2      	bgt.n	8001634 <_printf_i+0x210>
 800164e:	e7eb      	b.n	8001628 <_printf_i+0x204>
 8001650:	2500      	movs	r5, #0
 8001652:	f104 0619 	add.w	r6, r4, #25
 8001656:	e7f5      	b.n	8001644 <_printf_i+0x220>
 8001658:	08001ad5 	.word	0x08001ad5
 800165c:	08001ae6 	.word	0x08001ae6

08001660 <memmove>:
 8001660:	4288      	cmp	r0, r1
 8001662:	b510      	push	{r4, lr}
 8001664:	eb01 0402 	add.w	r4, r1, r2
 8001668:	d902      	bls.n	8001670 <memmove+0x10>
 800166a:	4284      	cmp	r4, r0
 800166c:	4623      	mov	r3, r4
 800166e:	d807      	bhi.n	8001680 <memmove+0x20>
 8001670:	1e43      	subs	r3, r0, #1
 8001672:	42a1      	cmp	r1, r4
 8001674:	d008      	beq.n	8001688 <memmove+0x28>
 8001676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800167a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800167e:	e7f8      	b.n	8001672 <memmove+0x12>
 8001680:	4402      	add	r2, r0
 8001682:	4601      	mov	r1, r0
 8001684:	428a      	cmp	r2, r1
 8001686:	d100      	bne.n	800168a <memmove+0x2a>
 8001688:	bd10      	pop	{r4, pc}
 800168a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800168e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001692:	e7f7      	b.n	8001684 <memmove+0x24>

08001694 <_sbrk_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d06      	ldr	r5, [pc, #24]	@ (80016b0 <_sbrk_r+0x1c>)
 8001698:	2300      	movs	r3, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	602b      	str	r3, [r5, #0]
 80016a0:	f7ff fac0 	bl	8000c24 <_sbrk>
 80016a4:	1c43      	adds	r3, r0, #1
 80016a6:	d102      	bne.n	80016ae <_sbrk_r+0x1a>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	b103      	cbz	r3, 80016ae <_sbrk_r+0x1a>
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	bd38      	pop	{r3, r4, r5, pc}
 80016b0:	200001b4 	.word	0x200001b4

080016b4 <memcpy>:
 80016b4:	440a      	add	r2, r1
 80016b6:	4291      	cmp	r1, r2
 80016b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80016bc:	d100      	bne.n	80016c0 <memcpy+0xc>
 80016be:	4770      	bx	lr
 80016c0:	b510      	push	{r4, lr}
 80016c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016ca:	4291      	cmp	r1, r2
 80016cc:	d1f9      	bne.n	80016c2 <memcpy+0xe>
 80016ce:	bd10      	pop	{r4, pc}

080016d0 <_realloc_r>:
 80016d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d4:	4607      	mov	r7, r0
 80016d6:	4614      	mov	r4, r2
 80016d8:	460d      	mov	r5, r1
 80016da:	b921      	cbnz	r1, 80016e6 <_realloc_r+0x16>
 80016dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016e0:	4611      	mov	r1, r2
 80016e2:	f7ff bc4d 	b.w	8000f80 <_malloc_r>
 80016e6:	b92a      	cbnz	r2, 80016f4 <_realloc_r+0x24>
 80016e8:	f7ff fbde 	bl	8000ea8 <_free_r>
 80016ec:	4625      	mov	r5, r4
 80016ee:	4628      	mov	r0, r5
 80016f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f4:	f000 f81a 	bl	800172c <_malloc_usable_size_r>
 80016f8:	4284      	cmp	r4, r0
 80016fa:	4606      	mov	r6, r0
 80016fc:	d802      	bhi.n	8001704 <_realloc_r+0x34>
 80016fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001702:	d8f4      	bhi.n	80016ee <_realloc_r+0x1e>
 8001704:	4621      	mov	r1, r4
 8001706:	4638      	mov	r0, r7
 8001708:	f7ff fc3a 	bl	8000f80 <_malloc_r>
 800170c:	4680      	mov	r8, r0
 800170e:	b908      	cbnz	r0, 8001714 <_realloc_r+0x44>
 8001710:	4645      	mov	r5, r8
 8001712:	e7ec      	b.n	80016ee <_realloc_r+0x1e>
 8001714:	42b4      	cmp	r4, r6
 8001716:	4622      	mov	r2, r4
 8001718:	4629      	mov	r1, r5
 800171a:	bf28      	it	cs
 800171c:	4632      	movcs	r2, r6
 800171e:	f7ff ffc9 	bl	80016b4 <memcpy>
 8001722:	4629      	mov	r1, r5
 8001724:	4638      	mov	r0, r7
 8001726:	f7ff fbbf 	bl	8000ea8 <_free_r>
 800172a:	e7f1      	b.n	8001710 <_realloc_r+0x40>

0800172c <_malloc_usable_size_r>:
 800172c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001730:	1f18      	subs	r0, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfbc      	itt	lt
 8001736:	580b      	ldrlt	r3, [r1, r0]
 8001738:	18c0      	addlt	r0, r0, r3
 800173a:	4770      	bx	lr

0800173c <atan2f>:
 800173c:	f000 b800 	b.w	8001740 <__ieee754_atan2f>

08001740 <__ieee754_atan2f>:
 8001740:	ee10 2a90 	vmov	r2, s1
 8001744:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8001748:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800174c:	b510      	push	{r4, lr}
 800174e:	eef0 7a40 	vmov.f32	s15, s0
 8001752:	d806      	bhi.n	8001762 <__ieee754_atan2f+0x22>
 8001754:	ee10 0a10 	vmov	r0, s0
 8001758:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800175c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8001760:	d904      	bls.n	800176c <__ieee754_atan2f+0x2c>
 8001762:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	bd10      	pop	{r4, pc}
 800176c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8001770:	d103      	bne.n	800177a <__ieee754_atan2f+0x3a>
 8001772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001776:	f000 b883 	b.w	8001880 <atanf>
 800177a:	1794      	asrs	r4, r2, #30
 800177c:	f004 0402 	and.w	r4, r4, #2
 8001780:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8001784:	b943      	cbnz	r3, 8001798 <__ieee754_atan2f+0x58>
 8001786:	2c02      	cmp	r4, #2
 8001788:	d05e      	beq.n	8001848 <__ieee754_atan2f+0x108>
 800178a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800185c <__ieee754_atan2f+0x11c>
 800178e:	2c03      	cmp	r4, #3
 8001790:	bf08      	it	eq
 8001792:	eef0 7a47 	vmoveq.f32	s15, s14
 8001796:	e7e6      	b.n	8001766 <__ieee754_atan2f+0x26>
 8001798:	b941      	cbnz	r1, 80017ac <__ieee754_atan2f+0x6c>
 800179a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8001860 <__ieee754_atan2f+0x120>
 800179e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001864 <__ieee754_atan2f+0x124>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	bfa8      	it	ge
 80017a6:	eef0 7a47 	vmovge.f32	s15, s14
 80017aa:	e7dc      	b.n	8001766 <__ieee754_atan2f+0x26>
 80017ac:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80017b0:	d110      	bne.n	80017d4 <__ieee754_atan2f+0x94>
 80017b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80017b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80017ba:	d107      	bne.n	80017cc <__ieee754_atan2f+0x8c>
 80017bc:	2c02      	cmp	r4, #2
 80017be:	d846      	bhi.n	800184e <__ieee754_atan2f+0x10e>
 80017c0:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <__ieee754_atan2f+0x128>)
 80017c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	e7cc      	b.n	8001766 <__ieee754_atan2f+0x26>
 80017cc:	2c02      	cmp	r4, #2
 80017ce:	d841      	bhi.n	8001854 <__ieee754_atan2f+0x114>
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <__ieee754_atan2f+0x12c>)
 80017d2:	e7f6      	b.n	80017c2 <__ieee754_atan2f+0x82>
 80017d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80017d8:	d0df      	beq.n	800179a <__ieee754_atan2f+0x5a>
 80017da:	1a5b      	subs	r3, r3, r1
 80017dc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80017e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80017e4:	da1a      	bge.n	800181c <__ieee754_atan2f+0xdc>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	da01      	bge.n	80017ee <__ieee754_atan2f+0xae>
 80017ea:	313c      	adds	r1, #60	@ 0x3c
 80017ec:	db19      	blt.n	8001822 <__ieee754_atan2f+0xe2>
 80017ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80017f2:	f000 f919 	bl	8001a28 <fabsf>
 80017f6:	f000 f843 	bl	8001880 <atanf>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
 80017fe:	2c01      	cmp	r4, #1
 8001800:	d012      	beq.n	8001828 <__ieee754_atan2f+0xe8>
 8001802:	2c02      	cmp	r4, #2
 8001804:	d017      	beq.n	8001836 <__ieee754_atan2f+0xf6>
 8001806:	2c00      	cmp	r4, #0
 8001808:	d0ad      	beq.n	8001766 <__ieee754_atan2f+0x26>
 800180a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001870 <__ieee754_atan2f+0x130>
 800180e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001812:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001874 <__ieee754_atan2f+0x134>
 8001816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800181a:	e7a4      	b.n	8001766 <__ieee754_atan2f+0x26>
 800181c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8001864 <__ieee754_atan2f+0x124>
 8001820:	e7ed      	b.n	80017fe <__ieee754_atan2f+0xbe>
 8001822:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8001878 <__ieee754_atan2f+0x138>
 8001826:	e7ea      	b.n	80017fe <__ieee754_atan2f+0xbe>
 8001828:	ee17 3a90 	vmov	r3, s15
 800182c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	e797      	b.n	8001766 <__ieee754_atan2f+0x26>
 8001836:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001870 <__ieee754_atan2f+0x130>
 800183a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001874 <__ieee754_atan2f+0x134>
 8001842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001846:	e78e      	b.n	8001766 <__ieee754_atan2f+0x26>
 8001848:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8001874 <__ieee754_atan2f+0x134>
 800184c:	e78b      	b.n	8001766 <__ieee754_atan2f+0x26>
 800184e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800187c <__ieee754_atan2f+0x13c>
 8001852:	e788      	b.n	8001766 <__ieee754_atan2f+0x26>
 8001854:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8001878 <__ieee754_atan2f+0x138>
 8001858:	e785      	b.n	8001766 <__ieee754_atan2f+0x26>
 800185a:	bf00      	nop
 800185c:	c0490fdb 	.word	0xc0490fdb
 8001860:	bfc90fdb 	.word	0xbfc90fdb
 8001864:	3fc90fdb 	.word	0x3fc90fdb
 8001868:	08001b04 	.word	0x08001b04
 800186c:	08001af8 	.word	0x08001af8
 8001870:	33bbbd2e 	.word	0x33bbbd2e
 8001874:	40490fdb 	.word	0x40490fdb
 8001878:	00000000 	.word	0x00000000
 800187c:	3f490fdb 	.word	0x3f490fdb

08001880 <atanf>:
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	ee10 5a10 	vmov	r5, s0
 8001886:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800188a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800188e:	eef0 7a40 	vmov.f32	s15, s0
 8001892:	d310      	bcc.n	80018b6 <atanf+0x36>
 8001894:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8001898:	d904      	bls.n	80018a4 <atanf+0x24>
 800189a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	bd38      	pop	{r3, r4, r5, pc}
 80018a4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80019dc <atanf+0x15c>
 80018a8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80019e0 <atanf+0x160>
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	bfc8      	it	gt
 80018b0:	eef0 7a47 	vmovgt.f32	s15, s14
 80018b4:	e7f3      	b.n	800189e <atanf+0x1e>
 80018b6:	4b4b      	ldr	r3, [pc, #300]	@ (80019e4 <atanf+0x164>)
 80018b8:	429c      	cmp	r4, r3
 80018ba:	d810      	bhi.n	80018de <atanf+0x5e>
 80018bc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80018c0:	d20a      	bcs.n	80018d8 <atanf+0x58>
 80018c2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80019e8 <atanf+0x168>
 80018c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80018ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	dce2      	bgt.n	800189e <atanf+0x1e>
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	e013      	b.n	8001906 <atanf+0x86>
 80018de:	f000 f8a3 	bl	8001a28 <fabsf>
 80018e2:	4b42      	ldr	r3, [pc, #264]	@ (80019ec <atanf+0x16c>)
 80018e4:	429c      	cmp	r4, r3
 80018e6:	d84f      	bhi.n	8001988 <atanf+0x108>
 80018e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80018ec:	429c      	cmp	r4, r3
 80018ee:	d841      	bhi.n	8001974 <atanf+0xf4>
 80018f0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80018f4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80018fc:	2300      	movs	r3, #0
 80018fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001902:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800190c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80019f0 <atanf+0x170>
 8001910:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80019f4 <atanf+0x174>
 8001914:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80019f8 <atanf+0x178>
 8001918:	ee66 6a06 	vmul.f32	s13, s12, s12
 800191c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8001920:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80019fc <atanf+0x17c>
 8001924:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8001928:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8001a00 <atanf+0x180>
 800192c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8001930:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001a04 <atanf+0x184>
 8001934:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8001938:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8001a08 <atanf+0x188>
 800193c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8001940:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a0c <atanf+0x18c>
 8001944:	eea6 5a87 	vfma.f32	s10, s13, s14
 8001948:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001a10 <atanf+0x190>
 800194c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8001950:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8001a14 <atanf+0x194>
 8001954:	eea7 5a26 	vfma.f32	s10, s14, s13
 8001958:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001a18 <atanf+0x198>
 800195c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8001960:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001964:	eea5 7a86 	vfma.f32	s14, s11, s12
 8001968:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196c:	d121      	bne.n	80019b2 <atanf+0x132>
 800196e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001972:	e794      	b.n	800189e <atanf+0x1e>
 8001974:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001978:	ee30 7a67 	vsub.f32	s14, s0, s15
 800197c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001980:	2301      	movs	r3, #1
 8001982:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001986:	e7be      	b.n	8001906 <atanf+0x86>
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <atanf+0x19c>)
 800198a:	429c      	cmp	r4, r3
 800198c:	d80b      	bhi.n	80019a6 <atanf+0x126>
 800198e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8001992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001996:	eea0 7a27 	vfma.f32	s14, s0, s15
 800199a:	2302      	movs	r3, #2
 800199c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80019a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a4:	e7af      	b.n	8001906 <atanf+0x86>
 80019a6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80019aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80019ae:	2303      	movs	r3, #3
 80019b0:	e7a9      	b.n	8001906 <atanf+0x86>
 80019b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <atanf+0x1a0>)
 80019b4:	491b      	ldr	r1, [pc, #108]	@ (8001a24 <atanf+0x1a4>)
 80019b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80019ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80019be:	edd3 6a00 	vldr	s13, [r3]
 80019c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019cc:	edd2 7a00 	vldr	s15, [r2]
 80019d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019d4:	bfb8      	it	lt
 80019d6:	eef1 7a67 	vneglt.f32	s15, s15
 80019da:	e760      	b.n	800189e <atanf+0x1e>
 80019dc:	bfc90fdb 	.word	0xbfc90fdb
 80019e0:	3fc90fdb 	.word	0x3fc90fdb
 80019e4:	3edfffff 	.word	0x3edfffff
 80019e8:	7149f2ca 	.word	0x7149f2ca
 80019ec:	3f97ffff 	.word	0x3f97ffff
 80019f0:	3c8569d7 	.word	0x3c8569d7
 80019f4:	3d4bda59 	.word	0x3d4bda59
 80019f8:	bd6ef16b 	.word	0xbd6ef16b
 80019fc:	3d886b35 	.word	0x3d886b35
 8001a00:	3dba2e6e 	.word	0x3dba2e6e
 8001a04:	3e124925 	.word	0x3e124925
 8001a08:	3eaaaaab 	.word	0x3eaaaaab
 8001a0c:	bd15a221 	.word	0xbd15a221
 8001a10:	bd9d8795 	.word	0xbd9d8795
 8001a14:	bde38e38 	.word	0xbde38e38
 8001a18:	be4ccccd 	.word	0xbe4ccccd
 8001a1c:	401bffff 	.word	0x401bffff
 8001a20:	08001b20 	.word	0x08001b20
 8001a24:	08001b10 	.word	0x08001b10

08001a28 <fabsf>:
 8001a28:	ee10 3a10 	vmov	r3, s0
 8001a2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a30:	ee00 3a10 	vmov	s0, r3
 8001a34:	4770      	bx	lr
	...

08001a38 <_init>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	bf00      	nop
 8001a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3e:	bc08      	pop	{r3}
 8001a40:	469e      	mov	lr, r3
 8001a42:	4770      	bx	lr

08001a44 <_fini>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr
